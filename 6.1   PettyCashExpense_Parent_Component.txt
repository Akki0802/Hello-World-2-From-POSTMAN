<!--Parent Lightning Component-->
<aura:component controller="pettycashaddDeleteConroller" Implements="flexipage:availableForRecordHome,force:hasRecordId">
    <aura:attribute name="recordId" type="String"  />
    <aura:attribute name="ListFileData" type="Object[]" />
    <aura:attribute name="IndexOfFileUpload" type="Integer[]" />
    <aura:attribute name="BillingDate" type="Date" />
    <aura:attribute name="TodayDate" type="Date" />
    <aura:attribute name="ListActivityCode" type="List" />
    <aura:attribute name="getLength" type="Integer"/>
    <aura:attribute name ="attachmentTracker" type = "List" />
    <aura:attribute name="lstDropdownNames" type="List" />
    <aura:attribute name="PettycashList" type="Petty_Cash_Expense__c[]"/>
    
    <!--Init handler which is call doInit js function on component Load-->  
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    
    <!--Event handler for Add and Delete Row Event which is fire from Child Component-->    
    <aura:handler name="DeleteRowEvt" event="c:DeleteRowEvt" action="{!c.removeDeletedRow}"/>
    <aura:handler name="AddRowEvt" event="c:AddNewRowEvt" action="{!c.addNewRow}"/>
    <aura:handler name="AddNewFilesEvt" event="c:AddNewFilesEvt" action="{!c.AddNewFilesEvt}" />
    <aura:handler name="checkActivityEvent" event="c:checkActivityEvent" action="{!c.checkActivityEvent}" />
    <aura:handler name="GetUploadId" event="c:GetUploadId" action="{!c.GetUploadId}" />
    <aura:handler name="AddtaskId" event="c:AddtaskId" action="{!c.AddtaskId}"/>
    
    <!--Header Part-->        
    <div class="slds-page-header">
        <div class="slds-page-header__row">
            <div class="slds-page-header__col-title">
                <div class="slds-media">
                    <div class="slds-media__figure">
                        <span class="slds-icon_container slds-icon-standard-opportunity" title="opportunity">
                            <img src="{!$Resource.LLFPettycash}" width="40" height="40"/>
                            <span class="slds-assistive-text ">PettyCash Register</span>
                        </span>
                    </div>
                    <div class="slds-media__body">
                        <div class="slds-page-header__name">
                            <div class="slds-page-header__name-title">
                                <h1>
                                    <span class="slds-page-header__title slds-truncate" title="Rohde Corp - 80,000 Widgets">PettyCash Register</span>
                                </h1>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <lightning:button class="slds-m-left_xx-large slds-float_right" variant="neutral" label="PettyCash Policy Document" onclick="{! c.openPettyFile }"/>
            
        </div>
    </div>
    
    <!--Table Part-->           
    <table class="slds-table slds-table_bordered slds-table_cell-buffer"> 
        <thead>
            <tr class="slds-text-title_caps">
                <th scope="col">
                    <div class="slds-truncate color">Slip No.</div>
                </th>
                <th scope="col">
                    <div class="slds-truncate" title="Bill No.">Bill No.</div>
                </th>
                <th scope="col">
                    <div class="slds-truncate" title="Bill Date">*Bill Date</div>
                </th>
                
                <th scope="col">
                    <div class="slds-truncate" title="Activity Code">*Activity Code</div>
                </th>
                <th scope="col">
                    <div class="slds-truncate" title="Description of activity expenses">Description of activity expenses</div>
                </th>
                <th scope="col">
                    <div class="slds-truncate" title="Nature of Exp">Nature of Exp</div>
                </th>
                <th scope="col">
                    <div class="slds-truncate" title="Amount">*Amount</div>
                </th>
                <th scope="col">
                    <div class="slds-truncate" title="Upload Files">*Upload Files</div>
                </th>
            </tr>
        </thead>   
        <tbody>       
            <aura:iteration items="{!v.PettycashList}" var="item" indexVar="index">
                <c:PettycashdynamicRowItem PettyCashInstance="{!item}" recordId="{!v.recordId}" BillingDate="{!v.BillingDate}" rowIndex="{!index}" 
                                           getLength="{!v.getLength}" attachmentTracker="{!v.attachmentTracker}"/>
            </aura:iteration>
        </tbody>
    </table>
    <br/>
    <lightning:button class="slds-button slds-button_brand" onclick="{!c.Save}" label = "Save" aura:id="disablebuttonid"/>
</aura:component>



































({
    doInit: function(component, event, helper) 
    {
        var today = new Date();	  //today.setHours(0,0,0,0);
        component.set('v.TodayDate',today);
        helper.createObjectData(component, event);
    },
    
    // function for save the Records 
    Save: function(component, event, helper) 
    {
        console.log('--- PettyCashdynamicRowController.js Save 17 index: ' + component.get('v.index'));
        console.log('--- PettyCashdynamicRowController.js Save 17 item: ' + component.get('v.item'));
        console.log('--- PettyCashdynamicRowController.js Save 17 PettycashList: ' + JSON.stringify(component.get('v.PettycashList')));
        console.log('--- PettyCashdynamicRowController.js Save 17 PettycashList[index]: ' + component.get('v.PettycashList')[component.get('v.index')]);
        
        var getLen1 =  component.get('v.getLength');
        
        if (helper.validateRequired(component, event,getLen1))
        {           
        //    if (helper.validateRequiredAgain(component, event,helper))
         //   {
                var action = component.get("c.savepattycash");
                action.setParams({
                    "ListPettyCash": component.get("v.PettycashList")
                });
                
                // set callback 
                action.setCallback(this, function(response) {
                    var state = response.getState();
                    
                    if (state === "SUCCESS") 
                    {
                        var values = response.getReturnValue();
                        
                        console.log('testing'+JSON.stringify(values));
                        var lstRec = component.get("v.PettycashList");
                        var fileVal = component.get("v.ListFileData");
                        var unique = component.get("v.IndexOfFileUpload");
                        for ( var i = 0; i < values.length; i++) 
                        {
                            if(unique.indexOf(i) !== -1)
                            {
                                var fileName = fileVal[i];
                                var parentId = values[i];
                                helper.uploadHelper(component, event,fileName,parentId);
                            }
                        }
                        
                        component.set("v.PettycashList", []);
                        helper.createObjectData(component, event);
                        //alert('record Save');
                        var toastEvent = $A.get("e.force:showToast");
                        toastEvent.setParams({
                            type: 'success',
                            "message": "Petty Cash Expense has been saved successfully."
                        });
                        toastEvent.fire();
                 //       let button = component.find('disablebuttonid');
                 //       button.set('v.disabled',true);
                        
                    }
                    else if(state == "INCOMPLETE")
                    {
                        alert('Incomplete State'); 
                    }
                        else if(state == "ERROR")
                        {
                            console.log('Errror  '+JSON.stringify(response.getError()));   
                        }
                            else{
                                alert('Failed');
                            }
                });
                // enqueue the server side action  
                $A.enqueueAction(action);
       //     }			// End of Validate Again
        }
    },
    
    // function for create new object Row in Contact List 
    addNewRow: function(component, event, helper) {
        helper.createObjectData(component, event);
    },
    
    // function for delete the row 
    removeDeletedRow: function(component, event, helper) {
        var index = event.getParam("indexVar");
        var AllRowsList = component.get("v.PettycashList");
        AllRowsList.splice(index, 1);
        component.set("v.PettycashList",AllRowsList);
    },
    
    openPettyFile: function(cmp, event, helper) {
        var pettyCashPolicyDocumentId = $A.get("{!$Label.c.PettyCashPolicyDocumentId}");
        var Id =[];
        Id.push(pettyCashPolicyDocumentId);
        $A.get('e.lightning:openFiles').fire({
            recordIds: Id
        });
    },
    
    checkActivityEvent : function(component, event,helper)
    {
        var activityName = event.getParam("ActivityCode");
        var indexx = event.getParam("IndexActivity");
        var lstGetActivityCode = component.get("v.ListActivityCode");
        
        lstGetActivityCode[indexx] = activityName;
        component.set("v.ListActivityCode",lstGetActivityCode);
    },
    
    AddNewFilesEvt : function(component, event,helper) {
        var val = event.getParam("currentfileName");
        var IndexNumber = event.getParam("IndexNumber");
        var lstOfFile = component.get("v.ListFileData");
        lstOfFile[IndexNumber] = val;
        
        component.set("v.ListFileData",lstOfFile);
        var test = component.get("v.ListFileData");
        var uploadIndexes = component.get("v.IndexOfFileUpload");
        
        uploadIndexes.push(IndexNumber);
        component.set("v.IndexOfFileUpload", uploadIndexes);
        
        var uniqueIndex = [];
        for(var i=0; i < uploadIndexes.length; i++)
        {
            if(uniqueIndex.indexOf(uploadIndexes[i]) === -1)
                uniqueIndex.push(uploadIndexes[i]);
        }
    },
    
    AddtaskId :function(component,event,helper){
        var index = event.getParam("indexVar");
        var taskId = event.getParam("taskId");
        var allRecords = component.get('v.PettycashList');
        allRecords[index].Project_Task__c = taskId;
    },
    
    GetUploadId :function(component,event,helper)
    {
        var getRowIndex     = event.getParam("indexVar");
        var getUploadId  = event.getParam("uploadFileId");
        helper.GetUploadId(component, event,getRowIndex,getUploadId);  
    }
})




































({
    createObjectData: function(component, event) {
        let attachmentTracker = component.get('v.attachmentTracker');
        attachmentTracker.push({ 'index' : '' , 'attachmentName': ''});
        
        component.set('v.attachmentTracker',attachmentTracker);
        
        // get the PettycashList from component and add(push) New Object to List  
        var recTempId = component.get("v.recordId");
        // alert(recTempId);
        var RowItemList = component.get("v.PettycashList");
        RowItemList.push({
            'sobjectType': 'Petty_Cash_Expense__c',
            'Expense__c': recTempId,
            'Bill_No__c': '',
            'Bill_Date__c': '',
            'Activity_Code_Project__c': '',
            'Description_of_activity_expenses__c': '',
            'Nature_of_exp__c': '',
            'Amount__c': ''  ,
            'Project_Task__c' : ''
            
        });
        // set the updated list to attribute (PettycashList) again    
        component.set("v.PettycashList", RowItemList);
    },
    
    // helper function for check if Bill No. is not null/blank on save  
    validateRequired: function(component, event,getLen1) {
        let attachmentTracker = component.get("v.attachmentTracker");
        
        function fireToastEvent(toastEvent, type, message) 		 //fn to fire Toast message 
        {
            toastEvent.setParams({
                "type" : type,
                "message" : message
            })
            toastEvent.fire();
        }
        
        var getLength = component.get('v.getLength');
        var isValid = true;
        var allCashRows = component.get("v.PettycashList");
        for (var indexVar = 0; indexVar < allCashRows.length; indexVar++) 
        {
            let todayDateWithTime = new Date();
            let todayDate = new Date(todayDateWithTime.getFullYear(), todayDateWithTime.getMonth(), todayDateWithTime.getDate())
            let selectedDateWithTime = new Date(allCashRows[indexVar].Bill_Date__c);
            let selectedDate = new Date(selectedDateWithTime.getFullYear(), selectedDateWithTime.getMonth(), selectedDateWithTime.getDate());
            
            /* Used for  validation on Wrong Date Format   */
            let yearsDiff = todayDate.getFullYear() - selectedDateWithTime.getFullYear();
            
            if(todayDate.getTime() == selectedDate.getTime())
                console.log('Today and Selected Dates are Equal');
            else if(todayDate.getTime() > selectedDate.getTime())
                console.log('Today is greater than Selected Date');
                else if(todayDate.getTime() < selectedDate.getTime())
                    console.log('Today is less than Selected Date');        //     Bill_No__c
            
              if (allCashRows[indexVar].Bill_No__c.length > 50 )// || allCashRows[indexVar].Bill_Date__c == null ) 
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Bill No. cannot be greater than 50 characters at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                	 alert('Bill No. cannot be greater than 50 characters at row'  + (indexVar + 1));   
                return;
            }       
                    
            if (allCashRows[indexVar].Bill_Date__c == '' || allCashRows[indexVar].Bill_Date__c == null ) 
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Bill Date cannot be blank at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                	 alert('Bill Date cannot be blank at row'  + (indexVar + 1));   
                return;
            }
            
            if (selectedDateWithTime == 'Invalid Date' || selectedDateWithTime == null ) 
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Invalid Bill Date  at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                	 alert('Invalid Bill Date  at row'  + (indexVar + 1));   
                return;
            }
            
            if (todayDate.getTime() < selectedDate.getTime()) 
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Bill date cannot be of future date at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                {	 alert('Bill date cannot be future date at row'  + (indexVar + 1));   
                }   return;
            }
            /*   ***************************************______________________***********************************************  */
            if(yearsDiff > 15)
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Please choose a valid Date from the Date Picker'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                  	alert('Please choose a valid Date from the Date Picker'  + (indexVar + 1));   
                return; 
            }
            
            if ( allCashRows[indexVar].Activity_Code_Project__c == null  || typeof(allCashRows[indexVar].Activity_Code_Project__c ) == undefined 
                || allCashRows[indexVar].Activity_Code_Project__c == '')
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Activity Code cannot be blank at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                	alert('Activity Code cannot be blank at row'  + (indexVar + 1));   
                return isValid;
            }            
            
            if (allCashRows[indexVar].Description_of_activity_expenses__c.length > 255 )
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Description of Activity Expense cannot be greater than 255 characters at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                    alert('Description of Activity Expense cannot be greater than 255 characters at row'  + (indexVar + 1));   
                return;
            }       

            if (allCashRows[indexVar].Nature_of_exp__c.length > 25 )
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Nature of Expense cannot be greater than 25 characters at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                    alert('Nature of Expense cannot be greater than 25 characters at row'  + (indexVar + 1));   
                return;
            }
            if (allCashRows[indexVar].Amount__c == ''|| allCashRows[indexVar].Amount__c == null  ) 
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Amount cannot be blank at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                	alert('Amount cannot be blank at row'  + (indexVar + 1));   
                return;
            }
           
            if (allCashRows[indexVar].Amount__c == 0.0  ) 
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Amount cannot be Zero at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                	alert('Amount cannot be Zero at row'  + (indexVar + 1));   
                return;
            }
           
             if (allCashRows[indexVar].Amount__c < 0 || allCashRows[indexVar].Amount__c > 100000 )
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg = 'Amount value exceeds at row '  + (indexVar + 1) +' , please choose an amount between Rs. 1-99999 ';
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                {	 
                    alert('Amount value exceeds at row '  + (indexVar + 1) +' , please choose an amount between Rs.1-99999');
                }   
                return; 
            }
           
            /*
            if (allCashRows[indexVar].Amount__c < 0  )	// || allCashRows[indexVar].Amount__c > 100000 ) 
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Amount cannot be less than Zero  at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                	alert('Amount cannot be less than Zero at row'  + (indexVar + 1));   
                return;
            }
              
            if (allCashRows[indexVar].Amount__c > 100000  )	// || allCashRows[indexVar].Amount__c > 100000 ) 
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Amount cannot be greater than 1 Lakh at row'  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                	alert('Amount cannot be greater than 1 Lakh at row'  + (indexVar + 1));   
                return;
            }
            */
            
             if (allCashRows[indexVar].Amount__c < 0 || allCashRows[indexVar].Amount__c > 100000 )
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg = 'Amount value exceeds at row '  + (indexVar + 1) +' , please choose an amount between 1-99999 ';
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                {	 
                    alert('Amount value exceeds at row '  + (indexVar + 1) +' , please choose an amount between 1-99999');
                }   
                return; 
            }
           
            
            if(attachmentTracker[indexVar].attachmentName == '' )
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Please add attachment at row '  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                    alert('Please add attachment at row '  + (indexVar + 1));
                return;
            }
        }
        return isValid;
    },
    
   /* 
    validateRequiredAgain: function(component, event,  helper ) 
    {
        let attachmentTracker = component.get("v.attachmentTracker");
        function fireToastEvent(toastEvent, type, message) 		 //fn to fire Toast message 
        {
            toastEvent.setParams({
                "type" : type,
                "message" : message
            })
            toastEvent.fire();
        }
        
        var isValid = true;
        var allCashRows = component.get("v.PettycashList");
        for (var indexVar = 0; indexVar < allCashRows.length; indexVar++) 
        {
            if(attachmentTracker[indexVar].attachmentName == '')
            {
                isValid = false;
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    let errorMsg ='Please ADD attachment at row '  + (indexVar + 1);
                    fireToastEvent(toastEvent, 'error', errorMsg);
                }
                else
                    alert('Please ADD attachment at row '  + (indexVar + 1));
                
                return  ;
            }
            
            if ( allCashRows[indexVar].ActivityCode === 'pasha'||  allCashRows[indexVar].ActivityCode === 'pasha bhai' 
                || allCashRows[indexVar].ActivityCode === null 
                //     ||  typeof(allCashRows[indexVar].Activity_Code_Project__c ) == undefined 
                ||  allCashRows[indexVar].ActivityCode === '')
            {
                var toastEvent = $A.get('e.force:showToast');
                if(toastEvent)
                {
                    toastEvent.setParams({
                        "type" : "error",
                        "message" : " Activity CODE cannot be saved as None, please choose a Activity Code !"
                    })
                    toastEvent.fire();
                }
                else
                {
                    alert(' Activity CODE cannot be saved as None, please choose a Activity Code !');
                }  
                
                return;
            }
        }
        return isValid;
    },
        */
    
    
    MAX_FILE_SIZE: 100000000, //Max file size 100 MB 
    CHUNK_SIZE: 750000,      //Chunk Max size 750Kb 
    
    uploadHelper: function(component, event,fileName,parentId) 
    {
        // start/show the loading spinner   
        component.set("v.showLoadingSpinner", true);
        
        var file = fileName;
        var self = this;
        
        // check the selected file size, if select file size greter then MAX_FILE_SIZE,
        // then show a alert msg to user,hide the loading spinner and return from function  
        if (file.size > self.MAX_FILE_SIZE) {
            component.set("v.showLoadingSpinner", false);
            component.set("v.fileName", 'Alert : File size cannot exceed ' + self.MAX_FILE_SIZE + ' bytes.\n' + ' Selected file size: ' + file.size);
            return;
        }
        
        // create a FileReader object 
        var objFileReader = new FileReader();
        
        // set onload function of FileReader object   
        objFileReader.onload = $A.getCallback(function() {
            var fileContents = objFileReader.result;
            var base64 = 'base64,';
            var dataStart = fileContents.indexOf(base64) + base64.length;
            
            fileContents = fileContents.substring(dataStart);
            // call the uploadProcess method 
            self.uploadProcess(component, file, fileContents,parentId);
        });
        objFileReader.readAsDataURL(file);
    },
    
    uploadProcess: function(component, file, fileContents,parentId) 
    {
        // set a default size or startpostiton as 0 
        var startPosition = 0;
        // calculate the end size or endPostion using Math.min() function which is return the min. value   
        var endPosition = Math.min(fileContents.length, startPosition + this.CHUNK_SIZE);
        // start with the initial chunk, and set the attachId(last parameter)is null in begin
        this.uploadInChunk(component, file, fileContents, startPosition, endPosition, '',parentId);
    },
    
    
    uploadInChunk: function(component, file, fileContents, startPosition, endPosition, attachId,parentId) {
        console.log('Hello1'+file.type);
        // call the apex method 'saveChunk'
        var getchunk = fileContents.substring(startPosition, endPosition);
        var action = component.get("c.saveChunk");
        action.setParams({
            parentId: parentId,
            fileName: file.name,
            base64Data: encodeURIComponent(getchunk),
            contentType: file.type,
            fileId: attachId
        });
        
        // set call back 
        action.setCallback(this, function(response) {
            attachId = response.getReturnValue();
            console.log('Return final Id'+attachId);
            
            var state = response.getState();
            if (state === "SUCCESS")
            {
                startPosition = endPosition;
                endPosition = Math.min(fileContents.length, startPosition + this.CHUNK_SIZE);
                
                if (startPosition < endPosition)
                    this.uploadInChunk(component, file, fileContents, startPosition, endPosition, attachId);
                else
                    component.set("v.showLoadingSpinner", false);
            }
            else if (state === "INCOMPLETE") {
                alert("From server: " + response.getReturnValue());
            }
                else if (state === "ERROR") {
                    var errors = response.getError();
                    if (errors) {
                        if (errors[0] && errors[0].message) {
                            alert("Error message: " + errors[0].message);
                        }
                    } else {
                        alert("Unknown error");
                    }
                } 
        });
        $A.enqueueAction(action);
    }
})

















.THIS slds-assistive-text {
   color:red;
    font-size:40px;
}
.THIS slds-truncate color {
     width:800px;
    border:1px solid red;
    height:50px;
    left:200px;
    position:relative;
}


























/*------------------------------------------------------------------------

Test Class :   LLF_getActivityOnPettyCash_Test
------------------------------------------------------------------------- */

public class LLF_getActivityOnPettyCash 
{
    @AuraEnabled
    public static List<String> getDropdownList()
    {
        List<String> lstDropdownList = new List<String>();
        Schema.DescribeFieldResult objDesFieldResult = Petty_Cash_Expense__c.Activity_Code_Project__c.getDescribe();
        List<Schema.PicklistEntry>  ple = objDesFieldResult.getPicklistValues();
        for(Schema.PicklistEntry pickListVal : ple)
        {
            lstDropdownList.add(pickListVal.getLabel());
        } 
        System.debug('lstDropdownList  : '+lstDropdownList);
        return lstDropdownList;
    }
    
		// It is used to fetch all Activity Codes
    @AuraEnabled
    public static List<Activity_Code__c> getAllActivityCode(String expenseId)
    {
        List<Milestone1_Task__c> lstOfActivity = new List<Milestone1_Task__c>();
        List<Milestone1_Task__c> lstTask = new List<Milestone1_Task__c>(); 
        
        Milestone1_Expense__c expenseRec = [SELECT Id,Project_Name__c FROM Milestone1_Expense__c WHERE ID =: ExpenseId];
        System.debug('--- expenseRec --'+ expenseRec);
        
        List<Activity_Code__c> lstActivity = [SELECT Id, Name FROM Activity_Code__c WHERE Project__c = :expenseRec.Project_Name__c];
        System.debug('---lstActivity --'+ lstActivity );
        
        List<Activity_Code__c> getActivityCodes = new List<Activity_Code__c>();
        for ( Activity_Code__c eachActivity  : lstActivity)
        {
            if(eachActivity.Name != null)
                getActivityCodes.add(eachActivity);
        }
        
        getActivityCodes.sort();
        return getActivityCodes;
    }
}